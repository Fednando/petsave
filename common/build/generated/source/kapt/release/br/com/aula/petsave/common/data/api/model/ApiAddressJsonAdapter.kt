// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package br.com.aula.petsave.common.`data`.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ApiAddressJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ApiAddress>() {
  private val options: JsonReader.Options = JsonReader.Options.of("address1", "address2", "city",
      "state", "postcode", "country")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "address1")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("ApiAddress").append(')') }

  public override fun fromJson(reader: JsonReader): ApiAddress {
    var address1: String? = null
    var address2: String? = null
    var city: String? = null
    var state: String? = null
    var postcode: String? = null
    var country: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> address1 = nullableStringAdapter.fromJson(reader)
        1 -> address2 = nullableStringAdapter.fromJson(reader)
        2 -> city = nullableStringAdapter.fromJson(reader)
        3 -> state = nullableStringAdapter.fromJson(reader)
        4 -> postcode = nullableStringAdapter.fromJson(reader)
        5 -> country = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ApiAddress(
        address1 = address1,
        address2 = address2,
        city = city,
        state = state,
        postcode = postcode,
        country = country
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ApiAddress?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("address1")
    nullableStringAdapter.toJson(writer, value_.address1)
    writer.name("address2")
    nullableStringAdapter.toJson(writer, value_.address2)
    writer.name("city")
    nullableStringAdapter.toJson(writer, value_.city)
    writer.name("state")
    nullableStringAdapter.toJson(writer, value_.state)
    writer.name("postcode")
    nullableStringAdapter.toJson(writer, value_.postcode)
    writer.name("country")
    nullableStringAdapter.toJson(writer, value_.country)
    writer.endObject()
  }
}
