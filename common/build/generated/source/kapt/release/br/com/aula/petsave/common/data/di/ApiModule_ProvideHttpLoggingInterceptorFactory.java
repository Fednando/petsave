// Generated by Dagger (https://dagger.dev).
package br.com.aula.petsave.common.data.di;

import br.com.aula.petsave.common.data.api.interceptors.LoggingInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideHttpLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final Provider<LoggingInterceptor> loggingInterceptorProvider;

  public ApiModule_ProvideHttpLoggingInterceptorFactory(
      Provider<LoggingInterceptor> loggingInterceptorProvider) {
    this.loggingInterceptorProvider = loggingInterceptorProvider;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideHttpLoggingInterceptor(loggingInterceptorProvider.get());
  }

  public static ApiModule_ProvideHttpLoggingInterceptorFactory create(
      Provider<LoggingInterceptor> loggingInterceptorProvider) {
    return new ApiModule_ProvideHttpLoggingInterceptorFactory(loggingInterceptorProvider);
  }

  public static HttpLoggingInterceptor provideHttpLoggingInterceptor(
      LoggingInterceptor loggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideHttpLoggingInterceptor(loggingInterceptor));
  }
}
