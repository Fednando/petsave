// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package br.com.aula.petsave.common.`data`.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ApiContactJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ApiContact>() {
  private val options: JsonReader.Options = JsonReader.Options.of("email", "phone", "address")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "email")

  private val nullableApiAddressAdapter: JsonAdapter<ApiAddress?> =
      moshi.adapter(ApiAddress::class.java, emptySet(), "address")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("ApiContact").append(')') }

  public override fun fromJson(reader: JsonReader): ApiContact {
    var email: String? = null
    var phone: String? = null
    var address: ApiAddress? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> email = nullableStringAdapter.fromJson(reader)
        1 -> phone = nullableStringAdapter.fromJson(reader)
        2 -> address = nullableApiAddressAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ApiContact(
        email = email,
        phone = phone,
        address = address
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ApiContact?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("email")
    nullableStringAdapter.toJson(writer, value_.email)
    writer.name("phone")
    nullableStringAdapter.toJson(writer, value_.phone)
    writer.name("address")
    nullableApiAddressAdapter.toJson(writer, value_.address)
    writer.endObject()
  }
}
