// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package br.com.aula.petsave.common.`data`.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ApiTokenJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ApiToken>() {
  private val options: JsonReader.Options = JsonReader.Options.of("token_type", "expires_in",
      "access_token")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "tokenType")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "expiresInSeconds")

  public override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("ApiToken").append(')') }

  public override fun fromJson(reader: JsonReader): ApiToken {
    var tokenType: String? = null
    var expiresInSeconds: Int? = null
    var accessToken: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> tokenType = nullableStringAdapter.fromJson(reader)
        1 -> expiresInSeconds = nullableIntAdapter.fromJson(reader)
        2 -> accessToken = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ApiToken(
        tokenType = tokenType,
        expiresInSeconds = expiresInSeconds,
        accessToken = accessToken
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ApiToken?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("token_type")
    nullableStringAdapter.toJson(writer, value_.tokenType)
    writer.name("expires_in")
    nullableIntAdapter.toJson(writer, value_.expiresInSeconds)
    writer.name("access_token")
    nullableStringAdapter.toJson(writer, value_.accessToken)
    writer.endObject()
  }
}
