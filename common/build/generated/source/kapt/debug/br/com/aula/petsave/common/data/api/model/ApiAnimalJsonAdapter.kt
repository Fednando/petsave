// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package br.com.aula.petsave.common.`data`.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Float
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ApiAnimalJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ApiAnimal>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "organization_id", "url",
      "type", "species", "breeds", "colors", "age", "gender", "size", "coat", "name", "description",
      "photos", "videos", "status", "attributes", "environment", "tags", "contact", "published_at",
      "distance")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "id")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "organizationId")

  private val nullableApiBreedsAdapter: JsonAdapter<ApiBreeds?> =
      moshi.adapter(ApiBreeds::class.java, emptySet(), "breeds")

  private val nullableApiColorsAdapter: JsonAdapter<ApiColors?> =
      moshi.adapter(ApiColors::class.java, emptySet(), "colors")

  private val nullableListOfApiPhotoSizesAdapter: JsonAdapter<List<ApiPhotoSizes>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, ApiPhotoSizes::class.java),
      emptySet(), "photos")

  private val nullableListOfApiVideoLinkAdapter: JsonAdapter<List<ApiVideoLink>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, ApiVideoLink::class.java),
      emptySet(), "videos")

  private val nullableApiAttributesAdapter: JsonAdapter<ApiAttributes?> =
      moshi.adapter(ApiAttributes::class.java, emptySet(), "attributes")

  private val nullableApiEnvironmentAdapter: JsonAdapter<ApiEnvironment?> =
      moshi.adapter(ApiEnvironment::class.java, emptySet(), "environment")

  private val nullableListOfNullableStringAdapter: JsonAdapter<List<String?>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "tags")

  private val nullableApiContactAdapter: JsonAdapter<ApiContact?> =
      moshi.adapter(ApiContact::class.java, emptySet(), "contact")

  private val nullableFloatAdapter: JsonAdapter<Float?> = moshi.adapter(Float::class.javaObjectType,
      emptySet(), "distance")

  public override fun toString(): String = buildString(31) {
      append("GeneratedJsonAdapter(").append("ApiAnimal").append(')') }

  public override fun fromJson(reader: JsonReader): ApiAnimal {
    var id: Long? = null
    var organizationId: String? = null
    var url: String? = null
    var type: String? = null
    var species: String? = null
    var breeds: ApiBreeds? = null
    var colors: ApiColors? = null
    var age: String? = null
    var gender: String? = null
    var size: String? = null
    var coat: String? = null
    var name: String? = null
    var description: String? = null
    var photos: List<ApiPhotoSizes>? = null
    var videos: List<ApiVideoLink>? = null
    var status: String? = null
    var attributes: ApiAttributes? = null
    var environment: ApiEnvironment? = null
    var tags: List<String?>? = null
    var contact: ApiContact? = null
    var publishedAt: String? = null
    var distance: Float? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = nullableLongAdapter.fromJson(reader)
        1 -> organizationId = nullableStringAdapter.fromJson(reader)
        2 -> url = nullableStringAdapter.fromJson(reader)
        3 -> type = nullableStringAdapter.fromJson(reader)
        4 -> species = nullableStringAdapter.fromJson(reader)
        5 -> breeds = nullableApiBreedsAdapter.fromJson(reader)
        6 -> colors = nullableApiColorsAdapter.fromJson(reader)
        7 -> age = nullableStringAdapter.fromJson(reader)
        8 -> gender = nullableStringAdapter.fromJson(reader)
        9 -> size = nullableStringAdapter.fromJson(reader)
        10 -> coat = nullableStringAdapter.fromJson(reader)
        11 -> name = nullableStringAdapter.fromJson(reader)
        12 -> description = nullableStringAdapter.fromJson(reader)
        13 -> photos = nullableListOfApiPhotoSizesAdapter.fromJson(reader)
        14 -> videos = nullableListOfApiVideoLinkAdapter.fromJson(reader)
        15 -> status = nullableStringAdapter.fromJson(reader)
        16 -> attributes = nullableApiAttributesAdapter.fromJson(reader)
        17 -> environment = nullableApiEnvironmentAdapter.fromJson(reader)
        18 -> tags = nullableListOfNullableStringAdapter.fromJson(reader)
        19 -> contact = nullableApiContactAdapter.fromJson(reader)
        20 -> publishedAt = nullableStringAdapter.fromJson(reader)
        21 -> distance = nullableFloatAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ApiAnimal(
        id = id,
        organizationId = organizationId,
        url = url,
        type = type,
        species = species,
        breeds = breeds,
        colors = colors,
        age = age,
        gender = gender,
        size = size,
        coat = coat,
        name = name,
        description = description,
        photos = photos,
        videos = videos,
        status = status,
        attributes = attributes,
        environment = environment,
        tags = tags,
        contact = contact,
        publishedAt = publishedAt,
        distance = distance
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ApiAnimal?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    nullableLongAdapter.toJson(writer, value_.id)
    writer.name("organization_id")
    nullableStringAdapter.toJson(writer, value_.organizationId)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value_.url)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value_.type)
    writer.name("species")
    nullableStringAdapter.toJson(writer, value_.species)
    writer.name("breeds")
    nullableApiBreedsAdapter.toJson(writer, value_.breeds)
    writer.name("colors")
    nullableApiColorsAdapter.toJson(writer, value_.colors)
    writer.name("age")
    nullableStringAdapter.toJson(writer, value_.age)
    writer.name("gender")
    nullableStringAdapter.toJson(writer, value_.gender)
    writer.name("size")
    nullableStringAdapter.toJson(writer, value_.size)
    writer.name("coat")
    nullableStringAdapter.toJson(writer, value_.coat)
    writer.name("name")
    nullableStringAdapter.toJson(writer, value_.name)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value_.description)
    writer.name("photos")
    nullableListOfApiPhotoSizesAdapter.toJson(writer, value_.photos)
    writer.name("videos")
    nullableListOfApiVideoLinkAdapter.toJson(writer, value_.videos)
    writer.name("status")
    nullableStringAdapter.toJson(writer, value_.status)
    writer.name("attributes")
    nullableApiAttributesAdapter.toJson(writer, value_.attributes)
    writer.name("environment")
    nullableApiEnvironmentAdapter.toJson(writer, value_.environment)
    writer.name("tags")
    nullableListOfNullableStringAdapter.toJson(writer, value_.tags)
    writer.name("contact")
    nullableApiContactAdapter.toJson(writer, value_.contact)
    writer.name("published_at")
    nullableStringAdapter.toJson(writer, value_.publishedAt)
    writer.name("distance")
    nullableFloatAdapter.toJson(writer, value_.distance)
    writer.endObject()
  }
}
