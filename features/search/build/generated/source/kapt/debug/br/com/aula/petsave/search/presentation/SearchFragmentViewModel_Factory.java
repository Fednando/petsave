// Generated by Dagger (https://dagger.dev).
package br.com.aula.petsave.search.presentation;

import br.com.aula.petsave.common.presentation.model.mappers.UiAnimalMapper;
import br.com.aula.petsave.common.utils.DispatchersProvider;
import br.com.aula.petsave.petsave.search.domain.usecases.SearchAnimals;
import br.com.aula.petsave.search.domain.usecases.GetSearchFilters;
import br.com.aula.petsave.search.domain.usecases.SearchAnimalsRemotely;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchFragmentViewModel_Factory implements Factory<SearchFragmentViewModel> {
  private final Provider<SearchAnimalsRemotely> searchAnimalsRemotelyProvider;

  private final Provider<SearchAnimals> searchAnimalsProvider;

  private final Provider<GetSearchFilters> getSearchFiltersProvider;

  private final Provider<UiAnimalMapper> uiAnimalMapperProvider;

  private final Provider<DispatchersProvider> dispatchersProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public SearchFragmentViewModel_Factory(
      Provider<SearchAnimalsRemotely> searchAnimalsRemotelyProvider,
      Provider<SearchAnimals> searchAnimalsProvider,
      Provider<GetSearchFilters> getSearchFiltersProvider,
      Provider<UiAnimalMapper> uiAnimalMapperProvider,
      Provider<DispatchersProvider> dispatchersProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.searchAnimalsRemotelyProvider = searchAnimalsRemotelyProvider;
    this.searchAnimalsProvider = searchAnimalsProvider;
    this.getSearchFiltersProvider = getSearchFiltersProvider;
    this.uiAnimalMapperProvider = uiAnimalMapperProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public SearchFragmentViewModel get() {
    return newInstance(searchAnimalsRemotelyProvider.get(), searchAnimalsProvider.get(), getSearchFiltersProvider.get(), uiAnimalMapperProvider.get(), dispatchersProvider.get(), compositeDisposableProvider.get());
  }

  public static SearchFragmentViewModel_Factory create(
      Provider<SearchAnimalsRemotely> searchAnimalsRemotelyProvider,
      Provider<SearchAnimals> searchAnimalsProvider,
      Provider<GetSearchFilters> getSearchFiltersProvider,
      Provider<UiAnimalMapper> uiAnimalMapperProvider,
      Provider<DispatchersProvider> dispatchersProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new SearchFragmentViewModel_Factory(searchAnimalsRemotelyProvider, searchAnimalsProvider, getSearchFiltersProvider, uiAnimalMapperProvider, dispatchersProvider, compositeDisposableProvider);
  }

  public static SearchFragmentViewModel newInstance(SearchAnimalsRemotely searchAnimalsRemotely,
      SearchAnimals searchAnimals, GetSearchFilters getSearchFilters, UiAnimalMapper uiAnimalMapper,
      DispatchersProvider dispatchersProvider, CompositeDisposable compositeDisposable) {
    return new SearchFragmentViewModel(searchAnimalsRemotely, searchAnimals, getSearchFilters, uiAnimalMapper, dispatchersProvider, compositeDisposable);
  }
}
