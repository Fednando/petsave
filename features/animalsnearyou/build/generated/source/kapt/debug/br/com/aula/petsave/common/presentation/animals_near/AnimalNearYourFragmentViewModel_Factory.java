// Generated by Dagger (https://dagger.dev).
package br.com.aula.petsave.common.presentation.animals_near;

import br.com.aula.petsave.common.presentation.animals_near.domain.GetAnimals;
import br.com.aula.petsave.common.presentation.animals_near.domain.RequestNextPageOfAnimals;
import br.com.aula.petsave.common.presentation.model.mappers.UiAnimalMapper;
import br.com.aula.petsave.common.utils.DispatchersProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AnimalNearYourFragmentViewModel_Factory implements Factory<AnimalNearYourFragmentViewModel> {
  private final Provider<UiAnimalMapper> uiAnimalMapperProvider;

  private final Provider<DispatchersProvider> dispatchersProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<RequestNextPageOfAnimals> requestNextPageOfAnimalsProvider;

  private final Provider<GetAnimals> getAnimalsProvider;

  public AnimalNearYourFragmentViewModel_Factory(Provider<UiAnimalMapper> uiAnimalMapperProvider,
      Provider<DispatchersProvider> dispatchersProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<RequestNextPageOfAnimals> requestNextPageOfAnimalsProvider,
      Provider<GetAnimals> getAnimalsProvider) {
    this.uiAnimalMapperProvider = uiAnimalMapperProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.requestNextPageOfAnimalsProvider = requestNextPageOfAnimalsProvider;
    this.getAnimalsProvider = getAnimalsProvider;
  }

  @Override
  public AnimalNearYourFragmentViewModel get() {
    return newInstance(uiAnimalMapperProvider.get(), dispatchersProvider.get(), compositeDisposableProvider.get(), requestNextPageOfAnimalsProvider.get(), getAnimalsProvider.get());
  }

  public static AnimalNearYourFragmentViewModel_Factory create(
      Provider<UiAnimalMapper> uiAnimalMapperProvider,
      Provider<DispatchersProvider> dispatchersProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<RequestNextPageOfAnimals> requestNextPageOfAnimalsProvider,
      Provider<GetAnimals> getAnimalsProvider) {
    return new AnimalNearYourFragmentViewModel_Factory(uiAnimalMapperProvider, dispatchersProvider, compositeDisposableProvider, requestNextPageOfAnimalsProvider, getAnimalsProvider);
  }

  public static AnimalNearYourFragmentViewModel newInstance(UiAnimalMapper uiAnimalMapper,
      DispatchersProvider dispatchersProvider, CompositeDisposable compositeDisposable,
      RequestNextPageOfAnimals requestNextPageOfAnimals, GetAnimals getAnimals) {
    return new AnimalNearYourFragmentViewModel(uiAnimalMapper, dispatchersProvider, compositeDisposable, requestNextPageOfAnimals, getAnimals);
  }
}
